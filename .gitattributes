package Project;
import java.awt.*;
import java.util.*;

import javax.swing.*;

import java.awt.event.*;

public class UserGUI extends UserManager implements ActionListener {
 int rm;
 int number = 1001;
 JFrame frame1;
 JPanel p;
 JLabel LBNum, LBName, LBBirth, LBGender, LBPhone, LBJob, LBAddress, LBKind, LBS_Day, LBE_Day; 
 JTextField tfNum, tfName, tfAddress, tfJob; // 번호, 이름, 주소, 직업
 JTextField tfPhone1, tfPhone2, tfPhone3; // 핸드폰번호
 Choice CYear, CMonth, CDay; // 생년월일
 Choice S_Year, S_Month, S_Day; // 등록일
 Choice E_Year, E_Month, E_Day; // 만료일
 JRadioButton rbMan, rbWoman; // 성별
 JRadioButton rbYes, rbNo; // 개인PT신청 유무
 JButton btnAdd, btnCancel, btnModify, btnRemove; // 가입, 취소, 수정, 탈퇴
 
 GridBagLayout gb;
 GridBagConstraints gbc;
 
 public UserGUI()
 {
  CreateGUI();
  tfNum.setVisible(false);
  LBNum.setVisible(false);
  btnModify.setEnabled(false);
  btnModify.setVisible(false);
  btnRemove.setEnabled(false);
  btnRemove.setVisible(false);
 }
 public UserGUI(int num, UserManager um)
 {
  CreateGUI();
  btnAdd.setEnabled(false);
  btnAdd.setVisible(false);
  fillData(num);
  rm = num;
 }
 private void CreateGUI()
 {
  this.setTitle("회원정보");
  gb = new GridBagLayout();
  this.setLayout(gb);
  gbc = new GridBagConstraints();
  gbc.fill = GridBagConstraints.BOTH;
  gbc.weightx = 1.0;
  gbc.weighty = 1.0;
  
  //회원번호
  LBNum = new JLabel("회원번호 : ");
  tfNum = new JTextField(5);
  gbAdd(LBNum, 0, 0, 1, 1);
  gbAdd(tfNum, 1, 0, 3, 1);
  
  //회원이름
  LBName = new JLabel("회원이름 : ");
  tfName = new JTextField(5);
  // 그리드백에 추가
  gbAdd(LBName, 0, 1, 1, 1);
  gbAdd(tfName, 1, 1 , 3, 1);
  
  //생년월일
  LBBirth = new JLabel("생년월일 : ");
  CYear = new Choice();
  JLabel LBYear = new JLabel("년");
  CMonth = new Choice();
  JLabel LBMonth = new JLabel("월");
  CDay = new Choice();
  JLabel LBDay = new JLabel("일");
  CYear.add("-------");
  for(int i = 2010; i >= 1930; i--)
  {
   CYear.add(String.valueOf(i));
  } // CYear의 choice에 추가
  CMonth.add("-------");
  for(int i = 1; i <= 12; i++)
  {
   CMonth.add(String.valueOf(i));
  } // CMonth의 choice에 추가
  CDay.add("-------");
  if(CMonth.getSelectedIndex() == 0)
  {
   for(int i = 1; i <= 28; i++)
   {
    CDay.add(String.valueOf(i));
   }
  }
  else if(CMonth.getSelectedIndex() == 4 || CMonth.getSelectedIndex() == 6 || CMonth.getSelectedIndex() == 9 || CMonth.getSelectedIndex() == 11)
  {
   for(int i = 1; i <= 30; i++)
   {
    CDay.add(String.valueOf(i));
   }
  }
  else if(CMonth.getSelectedIndex() == 1 || CMonth.getSelectedIndex() == 3 || CMonth.getSelectedIndex() == 5 || CMonth.getSelectedIndex() == 7 || CMonth.getSelectedIndex() == 8 || CMonth.getSelectedIndex() == 10 || CMonth.getSelectedIndex() == 12)
  {
   for(int i = 1; i <= 31; i++)
   {
    CDay.add(String.valueOf(i));
   }
  }
  JPanel PBirth = new JPanel(new FlowLayout(FlowLayout.LEFT));
  PBirth.add(CYear);
  PBirth.add(LBYear);
  PBirth.add(CMonth);
  PBirth.add(LBMonth);
  PBirth.add(CDay);
  PBirth.add(LBDay);
  gbAdd(LBBirth, 0, 2, 1, 1);
  gbAdd(PBirth, 1, 2, 3, 1);
  
  //성별
  LBGender = new JLabel("성별 : ");
  rbMan = new JRadioButton("남",true);
  rbWoman = new JRadioButton("여",true);
  JPanel PGender = new JPanel(new FlowLayout(FlowLayout.LEFT));
  ButtonGroup group = new ButtonGroup();
  group.add(rbMan);
  group.add(rbWoman);
  PGender.add(rbMan);
  PGender.add(rbWoman);
  gbAdd(LBGender, 0, 3, 1, 1);
  gbAdd(PGender, 1, 3, 3, 1);
  
  //핸드폰번호
  LBPhone = new JLabel("핸드폰번호 : ");
  tfPhone1 = new JTextField(3);
  tfPhone2 = new JTextField(4);
  tfPhone3 = new JTextField(4);
  JPanel PPhone = new JPanel(new FlowLayout(FlowLayout.LEFT));
  PPhone.add(tfPhone1);
  PPhone.add(new JLabel(" - "));
  PPhone.add(tfPhone2);
  PPhone.add(new JLabel(" - "));
  PPhone.add(tfPhone3);
  gbAdd(LBPhone, 0, 4, 1, 1);
  gbAdd(PPhone, 1, 4, 3, 1);
  
  //직업
  LBJob = new JLabel("직업 : ");
  tfJob = new JTextField(5);
  gbAdd(LBJob, 0, 5, 1, 1);
  gbAdd(tfJob, 1, 5, 3, 1);
  
  //주소
  LBAddress = new JLabel("주소 : ");
  tfAddress = new JTextField(20);
  gbAdd(LBAddress, 0, 6, 1, 1);
  gbAdd(tfAddress, 1, 6, 3, 1);
  
  //개인PT 유무
  LBKind = new JLabel("개인PT : ");
  rbYes = new JRadioButton("Y",true);
  rbNo = new JRadioButton("N",true);
  JPanel PKind = new JPanel(new FlowLayout(FlowLayout.LEFT));
  ButtonGroup group1 = new ButtonGroup();
  group1.add(rbYes);
  group1.add(rbNo);
  PKind.add(rbYes);
  PKind.add(rbNo);
  gbAdd(LBKind, 0, 7, 1, 1);
  gbAdd(PKind, 1, 7, 3, 1);
  
  //등록일
  LBS_Day = new JLabel("등록일 : ");
  S_Year = new Choice();
  JLabel LBS_Year = new JLabel("년");
  S_Month = new Choice();
  JLabel LBS_Month = new JLabel("월");
  S_Day = new Choice();
  JLabel LBS_day = new JLabel("일");
  S_Year.add("-------");
  for(int i = 2015; i >= 2010; i--)
  {
   S_Year.add(String.valueOf(i));
  }
  S_Month.add("-------");
  for(int i = 1; i <= 12; i++)
  {
   S_Month.add(String.valueOf(i));
  }
  S_Day.add("-------");
  if(S_Month.getSelectedIndex() == 1)
  {
   for(int i = 1; i <= 28; i++)
   {
    S_Day.add(String.valueOf(i));
   }
  }
  else if(S_Month.getSelectedIndex() == 3 || S_Month.getSelectedIndex() == 5 || S_Month.getSelectedIndex() == 8 || S_Month.getSelectedIndex() == 10)
  {
   for(int i = 1; i <= 30; i++)
   {
    S_Day.add(String.valueOf(i));
   }
  }
  else
  {
   for(int i = 1; i <= 31; i++)
   {
    S_Day.add(String.valueOf(i));
   }
  }
  JPanel PS_day = new JPanel(new FlowLayout(FlowLayout.LEFT));
  PS_day.add(S_Year);
  PS_day.add(LBS_Year);
  PS_day.add(S_Month);
  PS_day.add(LBS_Month);
  PS_day.add(S_Day);
  PS_day.add(LBS_day);
  gbAdd(LBS_Day, 0, 8, 1, 1);
  gbAdd(PS_day, 1, 8, 3, 1);
  
  
  //만료일
  LBE_Day = new JLabel("만료일 : ");
  E_Year = new Choice();
  JLabel LBE_Year = new JLabel("년");
  E_Month = new Choice();
  JLabel LBE_Month = new JLabel("월");
  E_Day = new Choice();
  JLabel LBE_day = new JLabel("일");
  
  E_Year.add("-------");
  for(int i = 2017; i >= 2015; i--)
  {
   E_Year.add(String.valueOf(i));
  }
  E_Month.add("-------");
  for(int i = 1; i <= 12; i++)
  {
   E_Month.add(String.valueOf(i));
  }
  E_Day.add("-------");
  if(E_Month.getSelectedIndex() == 1)
  {
   for(int i = 1; i <= 28; i++)
   {
    CDay.add(String.valueOf(i));
   }
  }
  else if(E_Month.getSelectedIndex() == 3 || E_Month.getSelectedIndex() == 5 || E_Month.getSelectedIndex() == 8 || E_Month.getSelectedIndex() == 10)
  {
   for(int i = 1; i <= 30; i++)
   {
    E_Day.add(String.valueOf(i));
   }
  }
  else
  {
   for(int i = 1; i <= 31; i++)
   {
    E_Day.add(String.valueOf(i));
   }
  }
  JPanel PE_day = new JPanel(new FlowLayout(FlowLayout.LEFT));
  PE_day.add(E_Year);
  PE_day.add(LBE_Year);
  PE_day.add(E_Month);
  PE_day.add(LBE_Month);
  PE_day.add(E_Day);
  PE_day.add(LBE_day);
  gbAdd(LBE_Day, 0, 9, 1, 1);
  gbAdd(PE_day, 1, 9, 3, 1);
  
  //버튼
  JPanel PButton = new JPanel();
  btnAdd = new JButton("가입");
  btnModify = new JButton("수정");
  btnRemove = new JButton("탈퇴");
  btnCancel = new JButton("취소");
  PButton.add(btnAdd);
  PButton.add(btnModify);
  PButton.add(btnRemove);
  PButton.add(btnCancel);
  
  gbAdd(PButton, 0, 10, 4, 1);
  
  btnAdd.addActionListener(this);
  btnModify.addActionListener(this);
  btnRemove.addActionListener(this);
  btnCancel.addActionListener(this);
  
  this.setSize(350, 500);
  this.setVisible(true);
  setDefaultCloseOperation(DISPOSE_ON_CLOSE); // 현재창만 종료 
 }
 private void fillData(int index)
 {
  
  String num = Integer.toString(us.get(index).getNum());
  String name = us.get(index).getName();
  String birth = us.get(index).getBirth();
  String gender = us.get(index).getGender();
  String phone = us.get(index).getPhone();
  String job = us.get(index).getJob();
  String address = us.get(index).getAddress();
  String kind = us.get(index).getKind();
  String start_day = us.get(index).getStart_day();
  String end_day = us.get(index).getEnd_day();
  tfNum.setText(num);
  tfNum.setEditable(false);
  tfName.setText(name);
  //CYear.setSelectedItem(birth.substring(0, 4));
  //Cyear.setText(birth.substring(4, 6));
  //tfDate.setText(birth.substring(6, 8));
  if(gender.equals("남"))
  {
   rbMan.setSelected(true);
  }
  else if(gender.equals("여"))
  {
   rbWoman.setSelected(true);
  }
  String Pns[] = phone.split("-"); // 핸드폰번호를 split으로 나누기
  tfPhone1.setText(Pns[0]);
  tfPhone2.setText(Pns[1]);
  tfPhone3.setText(Pns[2]);
  tfJob.setText(job);
  tfAddress.setText(address);
  if(kind.equals("Y"))
  {
   rbYes.setSelected(true);
  }
  else if(kind.equals("N"))
  {
   rbNo.setSelected(true);
  }

  
 }
 private void gbAdd(JComponent c, int x, int y, int w, int h) 
 {
  gbc.gridx = x;
  gbc.gridy = y;
  gbc.gridwidth = w;
  gbc.gridheight = h;
  gb.setConstraints(c, gbc);
  gbc.insets = new Insets(2, 2, 2, 2); // 여백생성
  add(c, gbc);
 } // 그리드백레이아웃에 추가하는 메소드
 
 public void actionPerformed(ActionEvent e)
 {
  if(e.getSource() == btnAdd)
  {
   AddUser();
   
  }
  else if(e.getSource() == btnCancel)
  {
   this.dispose();
  }
  else if(e.getSource() == btnModify)
  {
   ModifyUser();
  }
  else if(e.getSource() == btnRemove)
  {
   int a = JOptionPane.showConfirmDialog(this, "정말 삭제하시겠습니까?", "Confirm", JOptionPane.YES_NO_OPTION);
   if(a == JOptionPane.OK_OPTION)
   {
    RemoveUser(rm);
   }
   else
   {
    JOptionPane.showMessageDialog(this, "취소되었습니다.");
   }
  }
  
 }
 private void AddUser()
 {
  
  String name = tfName.getText();
  String Byear = CYear.getSelectedItem();
  String Bmonth = CMonth.getSelectedItem();
  String Bday = CDay.getSelectedItem();
  String birth = Byear +"년" + Bmonth + "월" + Bday + "일";
  String gender = null;
  if(rbMan.isSelected())
  {
   gender = "남";
  }
  else if(rbWoman.isSelected())
  {
   gender = "여";
  }
  String phone1 = tfPhone1.getText();
  String phone2 = tfPhone1.getText();
  String phone3 = tfPhone1.getText();
  String phone = phone1 + "-" + phone2 + "-" + phone3;
  String job = tfJob.getText();
  String address = tfAddress.getText();
  String kind = null;
  if(rbYes.isSelected())
  {
   kind = "Y";
  }
  else if(rbNo.isSelected())
  {
   kind = "N";
  }
  String Syear = S_Year.getSelectedItem();
  String Smonth = S_Month.getSelectedItem();
  String Sday = S_Day.getSelectedItem();
  String start_day = Syear +"년" + Smonth + "월" + Sday + "일";
  String Eyear = E_Year.getSelectedItem();
  String Emonth = E_Month.getSelectedItem();
  String Eday = E_Day.getSelectedItem();
  String end_day = Eyear +"년" + Emonth + "월" + Eday + "일";
  if(name.equals(""))
  {
   JOptionPane.showMessageDialog(this, "회원 이름을 입력해 주세요", "경고", JOptionPane.INFORMATION_MESSAGE);
  }
  else if(Byear.equals("-------") || Bmonth.equals("-------") || Bday.equals("-------") )
  {
   JOptionPane.showMessageDialog(this, "생년월일을 선택해주세요", "경고", JOptionPane.INFORMATION_MESSAGE);
  }
  else if(phone1.equals("") || phone2.equals("") || phone3.equals("")){
   JOptionPane.showMessageDialog(this, "핸드폰번호를 입력해 주세요", "메시지", JOptionPane.INFORMATION_MESSAGE);
  }
  else if(job.equals(""))
  {
   JOptionPane.showMessageDialog(this, "직업 입력해 주세요", "메시지", JOptionPane.INFORMATION_MESSAGE);
  }
  else if(Syear.equals("-------") || Smonth.equals("-------") || Sday.equals("-------") )
  {
   JOptionPane.showMessageDialog(this, "등록일을 선택해주세요", "경고", JOptionPane.INFORMATION_MESSAGE);
  }
  else if(Eyear.equals("-------") || Emonth.equals("-------") || Eday.equals("-------") )
  {
   JOptionPane.showMessageDialog(this, "만료일을 선택해주세요", "경고", JOptionPane.INFORMATION_MESSAGE);
  }
  else
  {
   if(phone.length() == 13)
   {
    JOptionPane.showMessageDialog(this, "잘못된 전화번호를 입력하였습니다.", "메시지", JOptionPane.INFORMATION_MESSAGE);
   }
   else
   {
    User u = new User(number, name, birth, gender, phone, job, address, kind, start_day, end_day);
    us.add(u);
    System.out.println(us.get(0).toString());
    JOptionPane.showMessageDialog(this, "회원이 등록되었습니다.", "메시지", JOptionPane.INFORMATION_MESSAGE);
    Vector data = new Vector();
    Vector data1 = new Vector();
    data1.add(number);
    data1.add(name);
    data1.add(birth);
    data1.add(gender);
    data1.add(phone);
    data1.add(job);
    data1.add(address);
    data1.add(kind);
    data1.add(start_day);
    data1.add(end_day);
     
    data.add(data1);
    for(int i = 0; i < data.size(); i++)
    {
     model.addRow((Vector) data.get(i));
    }
    this.dispose();
    
   }
  }
 } 
 private void ModifyUser()
 {
  
 }
 private void RemoveUser(int index)
 {
  us.remove(index);
 }

}
